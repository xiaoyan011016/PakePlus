import{a9 as w,ab as ve,j as f,i as y,c as de,a1 as B,o as H,ad as Q,f as W,a0 as ce,Q as me,q as pe,cL as ze,g as he,aq as g,z as fe,E as xe,ae as q}from"./index-BGwiQ_ZP.js";const Se={__name:"splitpanes",props:{horizontal:{type:Boolean,default:!1},pushOtherPanes:{type:Boolean,default:!0},maximizePanes:{type:Boolean,default:!0},rtl:{type:Boolean,default:!1},firstSplitter:{type:Boolean,default:!1}},emits:["ready","resize","resized","pane-click","pane-maximize","pane-add","pane-remove","splitter-click","splitter-dblclick"],setup(C,{emit:N}){const x=N,r=C,O=ze(),s=y([]),M=f(()=>s.value.reduce((e,n)=>(e[~~n.id]=n)&&e,{})),h=f(()=>s.value.length),c=y(null),P=y(!1),v=y({mouseDown:!1,dragging:!1,activeSplitter:null,cursorOffset:0}),z=y({splitter:null,timeoutId:null}),_=f(()=>({[`splitpanes splitpanes--${r.horizontal?"horizontal":"vertical"}`]:!0,"splitpanes--dragging":v.value.dragging})),E=()=>{document.addEventListener("mousemove",u,{passive:!1}),document.addEventListener("mouseup",S),"ontouchstart"in window&&(document.addEventListener("touchmove",u,{passive:!1}),document.addEventListener("touchend",S))},R=()=>{document.removeEventListener("mousemove",u,{passive:!1}),document.removeEventListener("mouseup",S),"ontouchstart"in window&&(document.removeEventListener("touchmove",u,{passive:!1}),document.removeEventListener("touchend",S))},b=(e,n)=>{const t=e.target.closest(".splitpanes__splitter");if(t){const{left:a,top:i}=t.getBoundingClientRect(),{clientX:l,clientY:o}="ontouchstart"in window&&e.touches?e.touches[0]:e;v.value.cursorOffset=r.horizontal?o-i:l-a}E(),v.value.mouseDown=!0,v.value.activeSplitter=n},u=e=>{v.value.mouseDown&&(e.preventDefault(),v.value.dragging=!0,requestAnimationFrame(()=>{K(Y(e)),m("resize",{event:e},!0)}))},S=e=>{v.value.dragging&&m("resized",{event:e},!0),v.value.mouseDown=!1,v.value.activeSplitter=null,setTimeout(()=>{v.value.dragging=!1,R()},100)},D=(e,n)=>{"ontouchstart"in window&&(e.preventDefault(),z.value.splitter===n?(clearTimeout(z.value.timeoutId),z.value.timeoutId=null,T(e,n),z.value.splitter=null):(z.value.splitter=n,z.value.timeoutId=setTimeout(()=>z.value.splitter=null,500))),v.value.dragging||m("splitter-click",{event:e,index:n},!0)},T=(e,n)=>{if(m("splitter-dblclick",{event:e,index:n},!0),r.maximizePanes){let t=0;s.value=s.value.map((a,i)=>(a.size=i===n?a.max:a.min,i!==n&&(t+=a.min),a)),s.value[n].size-=t,m("pane-maximize",{event:e,index:n,pane:s.value[n]}),m("resized",{event:e,index:n},!0)}},X=(e,n)=>{m("pane-click",{event:e,index:M.value[n].index,pane:M.value[n]})},Y=e=>{const n=c.value.getBoundingClientRect(),{clientX:t,clientY:a}="ontouchstart"in window&&e.touches?e.touches[0]:e;return{x:t-(r.horizontal?0:v.value.cursorOffset)-n.left,y:a-(r.horizontal?v.value.cursorOffset:0)-n.top}},J=e=>{e=e[r.horizontal?"y":"x"];const n=c.value[r.horizontal?"clientHeight":"clientWidth"];return r.rtl&&!r.horizontal&&(e=n-e),e*100/n},K=e=>{const n=v.value.activeSplitter;let t={prevPanesSize:F(n),nextPanesSize:k(n),prevReachedMinPanes:0,nextReachedMinPanes:0};const a=0+(r.pushOtherPanes?0:t.prevPanesSize),i=100-(r.pushOtherPanes?0:t.nextPanesSize),l=Math.max(Math.min(J(e),i),a);let o=[n,n+1],d=s.value[o[0]]||null,p=s.value[o[1]]||null;const j=d.max<100&&l>=d.max+t.prevPanesSize,re=p.max<100&&l<=100-(p.max+k(n+1));if(j||re){j?(d.size=d.max,p.size=Math.max(100-d.max-t.prevPanesSize-t.nextPanesSize,0)):(d.size=Math.max(100-p.max-t.prevPanesSize-k(n+1),0),p.size=p.max);return}if(r.pushOtherPanes){const U=V(t,l);if(!U)return;({sums:t,panesToResize:o}=U),d=s.value[o[0]]||null,p=s.value[o[1]]||null}d!==null&&(d.size=Math.min(Math.max(l-t.prevPanesSize-t.prevReachedMinPanes,d.min),d.max)),p!==null&&(p.size=Math.min(Math.max(100-l-t.nextPanesSize-t.nextReachedMinPanes,p.min),p.max))},V=(e,n)=>{const t=v.value.activeSplitter,a=[t,t+1];return n<e.prevPanesSize+s.value[a[0]].min&&(a[0]=Z(t).index,e.prevReachedMinPanes=0,a[0]<t&&s.value.forEach((i,l)=>{l>a[0]&&l<=t&&(i.size=i.min,e.prevReachedMinPanes+=i.min)}),e.prevPanesSize=F(a[0]),a[0]===void 0)?(e.prevReachedMinPanes=0,s.value[0].size=s.value[0].min,s.value.forEach((i,l)=>{l>0&&l<=t&&(i.size=i.min,e.prevReachedMinPanes+=i.min)}),s.value[a[1]].size=100-e.prevReachedMinPanes-s.value[0].min-e.prevPanesSize-e.nextPanesSize,null):n>100-e.nextPanesSize-s.value[a[1]].min&&(a[1]=G(t).index,e.nextReachedMinPanes=0,a[1]>t+1&&s.value.forEach((i,l)=>{l>t&&l<a[1]&&(i.size=i.min,e.nextReachedMinPanes+=i.min)}),e.nextPanesSize=k(a[1]-1),a[1]===void 0)?(e.nextReachedMinPanes=0,s.value.forEach((i,l)=>{l<h.value-1&&l>=t+1&&(i.size=i.min,e.nextReachedMinPanes+=i.min)}),s.value[a[0]].size=100-e.prevPanesSize-k(a[0]-1),null):{sums:e,panesToResize:a}},F=e=>s.value.reduce((n,t,a)=>n+(a<e?t.size:0),0),k=e=>s.value.reduce((n,t,a)=>n+(a>e+1?t.size:0),0),Z=e=>[...s.value].reverse().find(n=>n.index<e&&n.size>n.min)||{},G=e=>s.value.find(n=>n.index>e+1&&n.size>n.min)||{},ee=()=>{var e;const n=Array.from(((e=c.value)==null?void 0:e.children)||[]);for(const t of n){const a=t.classList.contains("splitpanes__pane"),i=t.classList.contains("splitpanes__splitter");!a&&!i&&(t.remove(),console.warn("Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed."))}},$=(e,n,t=!1)=>{const a=e-1,i=document.createElement("div");i.classList.add("splitpanes__splitter"),t||(i.onmousedown=l=>b(l,a),typeof window<"u"&&"ontouchstart"in window&&(i.ontouchstart=l=>b(l,a)),i.onclick=l=>D(l,a+1)),i.ondblclick=l=>T(l,a+1),n.parentNode.insertBefore(i,n)},ne=e=>{e.onmousedown=void 0,e.onclick=void 0,e.ondblclick=void 0,e.remove()},L=()=>{var e;const n=Array.from(((e=c.value)==null?void 0:e.children)||[]);for(const a of n)a.className.includes("splitpanes__splitter")&&ne(a);let t=0;for(const a of n)a.className.includes("splitpanes__pane")&&(!t&&r.firstSplitter?$(t,a,!0):t&&$(t,a),t++)},ae=({uid:e,...n})=>{const t=M.value[e];for(const[a,i]of Object.entries(n))t[a]=i},ie=e=>{var n;let t=-1;Array.from(((n=c.value)==null?void 0:n.children)||[]).some(a=>(a.className.includes("splitpanes__pane")&&t++,a.isSameNode(e.el))),s.value.splice(t,0,{...e,index:t}),s.value.forEach((a,i)=>a.index=i),P.value&&q(()=>{L(),A({addedPane:s.value[t]}),m("pane-add",{pane:s.value[t]})})},te=e=>{const n=s.value.findIndex(a=>a.id===e);s.value[n].el=null;const t=s.value.splice(n,1)[0];s.value.forEach((a,i)=>a.index=i),q(()=>{L(),m("pane-remove",{pane:t}),A({removedPane:{...t}})})},A=(e={})=>{!e.addedPane&&!e.removedPane?se():s.value.some(n=>n.givenSize!==null||n.min||n.max<100)?oe(e):le(),P.value&&m("resized")},le=()=>{const e=100/h.value;let n=0;const t=[],a=[];for(const i of s.value)i.size=Math.max(Math.min(e,i.max),i.min),n-=i.size,i.size>=i.max&&t.push(i.id),i.size<=i.min&&a.push(i.id);n>.1&&I(n,t,a)},se=()=>{let e=100;const n=[],t=[];let a=0;for(const l of s.value)e-=l.size,l.givenSize!==null&&a++,l.size>=l.max&&n.push(l.id),l.size<=l.min&&t.push(l.id);let i=100;if(e>.1){for(const l of s.value)l.givenSize===null&&(l.size=Math.max(Math.min(e/(h.value-a),l.max),l.min)),i-=l.size;i>.1&&I(i,n,t)}},oe=({addedPane:e,removedPane:n}={})=>{let t=100/h.value,a=0;const i=[],l=[];((e==null?void 0:e.givenSize)??null)!==null&&(t=(100-e.givenSize)/(h.value-1));for(const o of s.value)a-=o.size,o.size>=o.max&&i.push(o.id),o.size<=o.min&&l.push(o.id);if(!(Math.abs(a)<.1)){for(const o of s.value)(e==null?void 0:e.givenSize)!==null&&(e==null?void 0:e.id)===o.id||(o.size=Math.max(Math.min(t,o.max),o.min)),a-=o.size,o.size>=o.max&&i.push(o.id),o.size<=o.min&&l.push(o.id);a>.1&&I(a,i,l)}},I=(e,n,t)=>{let a;e>0?a=e/(h.value-n.length):a=e/(h.value-t.length),s.value.forEach((i,l)=>{if(e>0&&!n.includes(i.id)){const o=Math.max(Math.min(i.size+a,i.max),i.min),d=o-i.size;e-=d,i.size=o}else if(!t.includes(i.id)){const o=Math.max(Math.min(i.size+a,i.max),i.min),d=o-i.size;e-=d,i.size=o}}),Math.abs(e)>.1&&q(()=>{P.value&&console.warn("Splitpanes: Could not resize panes correctly due to their constraints.")})},m=(e,n=void 0,t=!1)=>{const a=(n==null?void 0:n.index)??v.value.activeSplitter??null;x(e,{...n,...a!==null&&{index:a},...t&&a!==null&&{prevPane:s.value[a-(r.firstSplitter?1:0)],nextPane:s.value[a+(r.firstSplitter?0:1)]},panes:s.value.map(i=>({min:i.min,max:i.max,size:i.size}))})};B(()=>r.firstSplitter,()=>L()),H(()=>{ee(),L(),A(),m("ready"),P.value=!0}),Q(()=>P.value=!1);const ue=()=>{var e;return xe("div",{ref:c,class:_.value},(e=O.default)==null?void 0:e.call(O))};return g("panes",s),g("indexedPanes",M),g("horizontal",f(()=>r.horizontal)),g("requestUpdate",ae),g("onPaneAdd",ie),g("onPaneRemove",te),g("onPaneClick",X),(e,n)=>(W(),he(fe(ue)))}},ge={__name:"pane",props:{size:{type:[Number,String]},minSize:{type:[Number,String],default:0},maxSize:{type:[Number,String],default:100}},setup(C){var N;const x=C,r=w("requestUpdate"),O=w("onPaneAdd"),s=w("horizontal"),M=w("onPaneRemove"),h=w("onPaneClick"),c=(N=ve())==null?void 0:N.uid,P=w("indexedPanes"),v=f(()=>P.value[c]),z=y(null),_=f(()=>{const u=isNaN(x.size)||x.size===void 0?0:parseFloat(x.size);return Math.max(Math.min(u,R.value),E.value)}),E=f(()=>{const u=parseFloat(x.minSize);return isNaN(u)?0:u}),R=f(()=>{const u=parseFloat(x.maxSize);return isNaN(u)?100:u}),b=f(()=>{var u;return`${s.value?"height":"width"}: ${(u=v.value)==null?void 0:u.size}%`});return B(()=>_.value,u=>r({uid:c,size:u})),B(()=>E.value,u=>r({uid:c,min:u})),B(()=>R.value,u=>r({uid:c,max:u})),H(()=>{O({id:c,el:z.value,min:E.value,max:R.value,givenSize:x.size===void 0?null:_.value,size:_.value})}),Q(()=>M(c)),(u,S)=>(W(),de("div",{ref_key:"paneEl",ref:z,class:"splitpanes__pane",onClick:S[0]||(S[0]=D=>pe(h)(D,u._.uid)),style:me(b.value)},[ce(u.$slots,"default")],4))}};export{Se as P,ge as g};
